[
  {
    "version": 0,
    "specs": [
      {
        "expect": "\\x.x",
        "toEvaluateTo": "\\x.x",
        "because": "trivial lambdas evaluate to themselves"
      },
      {
        "expect": "\\    x     .    x     ",
        "toEvaluateTo": "\\x.x",
        "because": "whitespace is ignored"
      },
      {
        "expect": "\\012421x%$#@!&*^.DLGKJLKSJGLKSDJx91",
        "toEvaluateTo": "\\x.x",
        "because": "characters not explicitly known by the tokenizer are ignored"
      },
      {
        "expect": "\\a.\\b.\\c.\\d.\\e.\\f.\\g.\\h.\\i.\\j.\\k.\\l.\\m.\\n.\\o.\\p.\\q.\\r.\\s.\\t.\\u.\\v.\\w.\\x.\\y.\\z.x",
        "toEvaluateTo": "\\a.\\b.\\c.\\d.\\e.\\f.\\g.\\h.\\i.\\j.\\k.\\l.\\m.\\n.\\o.\\p.\\q.\\r.\\s.\\t.\\u.\\v.\\w.\\x.\\y.\\z.x",
        "because": "The alphabet constitutes valid identifier names"
      },
      {
        "expect": "\\x.\\y.\\z.(x y)",
        "toEvaluateTo": "\\x.\\y.\\z.(x y)",
        "because": "more complicated lambdas evaluate to themselves"
      },
      {
        "expect": "(\\x.x \\y.y)",
        "toEvaluateTo": "\\y.y",
        "because": "identity (I) function returns the value its applied to"
      },
      {
        "expect": "((\\x.\\y.x \\y.y) \\z.z)",
        "toEvaluateTo": "\\y.y",
        "because": "const (K) function returns the value its applied to first"
      }
    ]
  }
]
